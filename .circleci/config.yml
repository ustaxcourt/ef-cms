version: 2.1
orbs:
  git-shallow-clone: guitarrapc/git-shallow-clone@2.5.0
define: &efcms-docker-image $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:3.0.2

commands:
  npm-and-cypress-install:
    steps:
      - restore_cache:
          keys:
            - v27-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
            - v27-cypress-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            else
              echo package.json and package-lock.json are unchanged. Using cached node_modules folder.
            fi
      - run:
          name: Install Cypress dependency
          command: |
            if [ ! -d ~/.cache/Cypress ]; then
              echo Installing Cypress
              ./node_modules/.bin/cypress install
            else
              echo Found cached Cypress version. Using cached Cypress folder.
            fi
      - run:
          name: Reset package-lock
          command: 'git checkout -- package-lock.json'
      - save_cache:
          key: v27-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - save_cache:
          key: v27-cypress-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.cache/Cypress
  npm-install:
    steps:
      - restore_cache:
          keys:
            - v27-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            else
              echo package.json and package-lock.json are unchanged. Using cached node_modules folder.
            fi
      - run:
          name: Reset package-lock
          command: 'git checkout -- package-lock.json'
      - save_cache:
          key: v27-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

jobs:
  deploy:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: medium+
    steps:
      - git-shallow-clone/checkout
      - npm-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Build Docker Image
          command: |
            cd web-api/runtimes/puppeteer && ./build.sh && cd ../../..
      - run:
          name: Setup Blue Green Migration If Needed
          command: |
            ./setup-for-blue-green-migration.sh
      - run:
          name: Setup Migrate Flag
          command: echo "export MIGRATE_FLAG=$(./scripts/dynamo/get-migrate-flag.sh $ENV)" >> $BASH_ENV
      - run:
          name: Setup Destination Table Var
          command: echo "export DESTINATION_TABLE=$(./scripts/dynamo/get-destination-table.sh $ENV)" >> $BASH_ENV
      - run:
          no_output_timeout: 20m
          name: 'Deploy - Web API - Terraform'
          command: |
            cd web-api/terraform/main && ../bin/deploy-app.sh $ENV
      - run:
          no_output_timeout: 20m
          name: 'Deploy - Web Client - Terraform'
          command: |
            cd web-client/terraform/main && ../bin/deploy-app.sh $ENV
      - run:
          name: Setup Elasticsearch Index Settings
          command: |
            ./web-api/setup-elasticsearch-index.sh $ENV
      - run:
          name: Admin User Setup
          command: |
            if [ "${CIRCLE_BRANCH}" != "prod" ]; then
              npx ts-node --transpile-only shared/admin-tools/user/setup-admin.js
            else
              echo "skipping…"
            fi
      - run:
          name: Test Users Setup
          command: |
            if [ "${CIRCLE_BRANCH}" != "prod" ]; then
              ./shared/admin-tools/user/setup-test-users.sh $ENV
            else
              echo "skipping…"
            fi
      - run:
          name: Setup Judge Users File Var
          command: |
            if [ "${CIRCLE_BRANCH}" != "prod" ] && [ "${CIRCLE_BRANCH}" != "test" ] && [ "${CIRCLE_BRANCH}" != "migration" ]; then
              echo "export FILE_NAME=./scripts/data-import/judge/judge_users.csv" >> $BASH_ENV
            else
              echo "skipping…"
            fi
      - run:
          name: Judge Users Setup
          command: |
            if [ "${CIRCLE_BRANCH}" != "prod" ] && [ "${CIRCLE_BRANCH}" != "test" ] && [ "${CIRCLE_BRANCH}" != "migration" ]; then
              ./scripts/data-import/judge/bulk-import-judge-users.sh
            else
              echo "skipping…"
            fi
      - run:
          name: 'Deploy - Web Client - S3'
          command: |
            ./web-client/deploy-ui.sh
      - run:
          name: 'Deploy - Public Web Client - S3'
          command: |
            ./web-client/deploy-public.sh
      - run:
          name: 'Deploy - Web API - Cognito Customize'
          command: |
            cd web-api && ./setup-cognito-ui.sh $ENV
      - run:
          name: 'Deploy - Authorizer Smoke Tests'
          command: |
            npm run verify-authorizers -- $ENV
      - run:
          name: 'Deploy - Verify Private S3 Buckets'
          command: |
            npm run verify-private-s3-buckets -- $ENV
      - run:
          name: 'Deploy - Verify Private Elasticsearch'
          command: |
            npm run verify-private-elasticsearch -- $ENV
      - run:
          name: 'Deploy - Verify Cognito Lambda Triggers'
          command: |
            npm run verify-cognito-lambda-triggers -- $ENV
      - run:
          name: 'Deploy - Verify USTC Admin User Disabled'
          command: |
            if [ "${CIRCLE_BRANCH}" != "prod" ]; then
              npx ts-node --transpile-only shared/admin-tools/user/verify-ustc-admin-user-disabled.js
            else
              echo "Skipping verify admin user disabled step on prod"
            fi
      - store_artifacts:
          path: /home/app/cypress-smoketests/videos/
      - run:
          name: 'Deploy - Pending Color Switch'
          command: npm run pending-color-switch

  migrate:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: medium+
    steps:
      - git-shallow-clone/checkout
      - npm-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Deploy Check Migration Status Cron Lambda
          command: |
            npm run deploy:migration-cron -- $ENV
      - run:
          name: Setup Migration Infrastructure
          command: |
            if [ "$MIGRATE_FLAG" == "true" ]; then
              npm run deploy:migration -- $ENV
            fi
      - run:
          name: Disable Destination Table Stream
          command: |
            if [ "$MIGRATE_FLAG" == "true" ]; then
              ./web-api/disable-deploying-dynamo-stream-trigger.sh
            fi
      - run:
          name: Run Migration
          command: |
            if [ "$MIGRATE_FLAG" == "true" ]; then
              npm run start:migration -- $ENV
            fi
      - run:
          name: Enable Check Migration Status Cron
          command: |
            ./web-api/workflow-terraform/migration-cron/bin/enable.sh

  prepare-for-reindex:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: medium+
    steps:
      - git-shallow-clone/checkout
      - npm-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Disable Check Migration Status Cron
          command: |
            ./web-api/workflow-terraform/migration-cron/bin/disable.sh
      - run:
          name: Deploy Check Reindex Status Cron Lambda
          command: |
            npm run deploy:reindex-cron -- $ENV
      - run:
          name: Track successful migrations
          command: |
            if [ "$MIGRATE_FLAG" == "true" ]; then
              node ./web-api/track-successful-migrations.js
            fi
      - run:
          name: Enable Destination Table Stream
          command: |
            if [ "$MIGRATE_FLAG" == "true" ]; then
              ./web-api/enable-deploying-dynamo-stream-trigger.sh
            fi
      - run:
          name: Enable Check Reindex Status Cron
          command: |
            ./web-api/workflow-terraform/reindex-cron/bin/enable.sh

  disable-reindex-cron:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: medium+
    steps:
      - git-shallow-clone/checkout
      - npm-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Disable Check Reindex Status Cron
          command: |
            ./web-api/workflow-terraform/reindex-cron/bin/disable.sh

  smoketests:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: medium+
    steps:
      - git-shallow-clone/checkout
      - npm-and-cypress-install
      - run:
          name: Create Cypress Artifacts Directory
          command: mkdir /tmp/cypress
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: 'Disable Maintenance Mode'
          command: npm run maintenance:disengage $ENV
      - run:
          name: 'Cypress Smoke Tests'
          command: npm run cypress:smoketests
      - run:
          name: 'Pa11y Smoke Tests'
          command: npm run test:pa11y:smoketests
      - store_artifacts:
          path: /root/project/cypress-smoketests/videos/

  smoketests-readonly:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: medium+
    steps:
      - git-shallow-clone/checkout
      - npm-and-cypress-install
      - run:
          name: Create Cypress Artifacts Directory
          command: mkdir /tmp/cypress
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Create and Enable Test User
          command: npx ts-node --transpile-only ./scripts/create-and-enable-smoketest-user.js
      - run:
          name: 'Cypress Readonly Smoke Tests'
          command: |
            set +e
            npm run cypress:readonly
            echo "export READONLY_SMOKETESTS_RESULT=$?" >> $BASH_ENV
            set -e
      - run:
          name: Disable Test User
          command: npx ts-node --transpile-only ./scripts/disable-smoketest-user.js
      - run:
          name: Kill Build if Smoketests Failed
          command: ./scripts/kill-circle-build.sh
      - run:
          name: 'Cypress Public Readonly Smoke Tests'
          command: npm run cypress:readonly:public
      - store_artifacts:
          path: /root/project/cypress-readonly/videos/

  deploy-switch-colors-cron:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - git-shallow-clone/checkout
      - npm-and-cypress-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Deploy Switch Colors Cron
          command: |
            npm run deploy:switch-colors-cron -- $ENV

  disable-switch-colors-cron:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - git-shallow-clone/checkout
      - npm-and-cypress-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Disable Switch Colors Cron
          command: |
            npm run destroy:switch-colors-cron -- $ENV

  switch-colors:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: medium+
    steps:
      - git-shallow-clone/checkout
      - npm-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: 'Switch Colors'
          command: npm run switch-colors

  backup-source-dynamo-table:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: small
    steps:
      - git-shallow-clone/checkout
      - npm-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Backup Source DynamoDB table
          command: |
            if [ $MIGRATE_FLAG == true ]; then
              npm run backup:dynamo-table -- $SOURCE_TABLE
            fi

  delete-api-mappings:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: small
    steps:
      - git-shallow-clone/checkout
      - npm-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Delete Source API Gateway Mappings
          command: |
            npm run delete:api-gateway-mappings -- "${EFCMS_DOMAIN}" "${DEPLOYING_COLOR}"

  cleanup:
    docker:
      - image: *efcms-docker-image
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: medium
    steps:
      - git-shallow-clone/checkout
      - npm-install
      - run:
          name: Setup Env
          command: |
            ./scripts/env/env-for-circle.sh
      - run:
          name: Destroy Migration Infrastructure
          command: |
            if [ $MIGRATE_FLAG == true ]; then
              npm run destroy:migration -- $ENV
            fi
      - run:
          name: Destroy Check Migration Status Cron Infrastructure
          command: |
            npm run destroy:migration-cron -- $ENV
      - run:
          name: Destroy Check Reindex Status Cron Infrastructure
          command: |
            npm run destroy:reindex-cron -- $ENV
      - run:
          name: Delete Source ElasticSearch cluster
          command: |
            if [ $MIGRATE_FLAG == true ]; then
              npm run delete:elasticsearch-cluster -- $SOURCE_ELASTICSEARCH
            fi
      - run:
          name: Delete Source Dynamo table
          command: |
            if [ $MIGRATE_FLAG == true ]; then
              npm run delete:dynamo-table -- $SOURCE_TABLE
            fi
      - run:
          name: Cleanup Deploy Table After Migration
          command: |
            if [ $MIGRATE_FLAG == true ]; then
              npm run migration:cleanup -- $ENV
            fi

build-and-deploy-with-context-defaults: &build-and-deploy-with-context-defaults
  context: efcms-<< pipeline.git.branch >>
  filters:
    branches:
      only:
        - prod

workflows:
  version: 2

  build-and-deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - test
                - develop
                - irs
                - staging
                - experimental1
                - experimental2
                - experimental3
                - experimental4
                - experimental5
                - migration
      - migrate:
          requires:
            - deploy
          filters:
            branches:
              only:
                - develop
                - irs
                - staging
                - test
                - experimental1
                - experimental2
                - experimental3
                - experimental4
                - experimental5
                - migration
      - wait-for-migration:
          type: approval
          requires:
            - migrate
      - prepare-for-reindex:
          requires:
            - wait-for-migration
          filters:
            branches:
              only:
                - develop
                - irs
                - staging
                - test
                - experimental1
                - experimental2
                - experimental3
                - experimental4
                - experimental5
                - migration
      - wait-for-reindex:
          type: approval
          requires:
            - prepare-for-reindex
      - disable-reindex-cron:
          requires:
            - wait-for-reindex
      - smoketests:
          requires:
            - disable-reindex-cron
          filters:
            branches:
              only:
                - develop
                - irs
                - staging
                - test
                - experimental1
                - experimental2
                - experimental3
                - experimental4
                - experimental5
                - migration
      - smoketests-readonly:
          requires:
            - smoketests
          filters:
            branches:
              only:
                - develop
                - irs
                - staging
                - test
                - experimental1
                - experimental2
                - experimental3
                - experimental4
                - experimental5
                - migration
      - switch-colors:
          requires:
            - smoketests-readonly
          filters:
            branches:
              only:
                - develop
                - irs
                - staging
                - test
                - experimental1
                - experimental2
                - experimental3
                - experimental4
                - experimental5
                - migration
      - cleanup:
          requires:
            - switch-colors
          filters:
            branches:
              only:
                - develop
                - irs
                - staging
                - test
                - experimental1
                - experimental2
                - experimental3
                - experimental4
                - experimental5
                - migration

  build-and-deploy-with-context:
    jobs:
      - deploy:
          <<: *build-and-deploy-with-context-defaults
      - migrate:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - deploy
      - wait-for-migration:
          <<: *build-and-deploy-with-context-defaults
          type: approval
          requires:
            - migrate
      - prepare-for-reindex:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - wait-for-migration
      - wait-for-reindex:
          <<: *build-and-deploy-with-context-defaults
          type: approval
          requires:
            - prepare-for-reindex
      - disable-reindex-cron:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - wait-for-reindex
      - smoketests-readonly:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - disable-reindex-cron
      - deploy-switch-colors-cron:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - smoketests-readonly
      - wait-for-switch:
          <<: *build-and-deploy-with-context-defaults
          type: approval
          requires:
            - deploy-switch-colors-cron
      - disable-switch-colors-cron:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - wait-for-switch
      - switch-colors:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - disable-switch-colors-cron
      - backup-source-dynamo-table:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - switch-colors
      - delete-api-mappings:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - switch-colors
      - cleanup:
          <<: *build-and-deploy-with-context-defaults
          requires:
            - backup-source-dynamo-table
            - delete-api-mappings
