'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var fetch = require('isomorphic-fetch');
var platformConfig = require('../config');
var currentVersion = require('../../package.json').version;

var getTokens = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(code) {
    var body, response, text;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            body = JSON.stringify({
              code,
              redirect_uri: `${platformConfig.frontendUrl}callback`
            });
            _context.next = 3;
            return fetch(`${platformConfig.backendUrl}tokens`, {
              method: 'POST',
              body,
              headers: {
                'Content-Type': 'application/json',
                'x-platform-version': currentVersion
              }
            });

          case 3:
            response = _context.sent;

            if (response.ok) {
              _context.next = 9;
              break;
            }

            _context.next = 7;
            return response.text();

          case 7:
            text = _context.sent;
            throw new Error(text);

          case 9:
            return _context.abrupt('return', response.json());

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function getTokens(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = getTokens;
//# sourceMappingURL=getTokens.js.map