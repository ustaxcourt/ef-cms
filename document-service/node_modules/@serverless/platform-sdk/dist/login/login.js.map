{"version":3,"sources":["../../src/login/login.js"],"names":["express","require","bodyParser","cors","querystring","openBrowser","getTokens","platformConfig","login","app","use","json","server","listen","refreshToken","scope","AUTH0_DOMAIN","auth0Domain","auth0Queries","stringify","audience","response_type","client_id","auth0ClientId","redirect_uri","frontendUrl","join","auth0Endpoint","opnRes","Promise","resolve","get","req","res","kill","query","code","tokens","refresh_token","queriesObj","idToken","id_token","accessToken","access_token","expiresIn","expires_in","cli","cliAuthed","tokensQueries","redirect","end","endLoginQueries","cliLoginSuccessful","close","expiresAt","Number","module","exports"],"mappings":";;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,aAAaD,QAAQ,aAAR,CAAnB;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,cAAcH,QAAQ,aAAR,CAApB;AACA,IAAMI,cAAcJ,QAAQ,eAAR,CAApB;AACA,IAAMK,YAAYL,QAAQ,aAAR,CAAlB;AACA,IAAMM,iBAAiBN,QAAQ,WAAR,CAAvB;;AAEA,IAAMO;AAAA,qEAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,eADM,GACAT,SADA;;AAEZS,gBAAIC,GAAJ,CAAQR,WAAWS,IAAX,EAAR;AACAF,gBAAIC,GAAJ,CAAQP,MAAR;AACMS,kBAJM,GAIGH,IAAII,MAAJ,CAAW,IAAX,CAJH;AAKRC,wBALQ;AAONC,iBAPM,GAOE,CAAC,QAAD,EAAW,gBAAX,EAA6B,OAA7B,EAAsC,SAAtC,EAAiD,MAAjD,EAAyD,gBAAzD,CAPF;AASNC,wBATM,GASST,eAAeU,WATxB;AAWNC,wBAXM,GAWSd,YAAYe,SAAZ,CAAsB;AACzCC,wBAAW,WAAUJ,YAAa,WADO;AAEzCK,6BAAe,MAF0B;AAGzCC,yBAAWf,eAAegB,aAHe;AAIzCC,4BAAe,GAAEjB,eAAekB,WAAY,UAJH;AAKzCV,qBAAOA,MAAMW,IAAN,CAAW,GAAX;AALkC,aAAtB,CAXT;AAkBNC,yBAlBM,GAkBW,WAAUX,YAAa,cAAaE,YAAa,EAlB5D;AAAA;AAAA,mBAoBSb,YAAYsB,aAAZ,CApBT;;AAAA;AAoBNC,kBApBM;AAAA,8CAsBL,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BrB,kBAAIsB,GAAJ,CAAQ,GAAR;AAAA,oFAAa,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsB;AACjC,8BAAIL,MAAJ,EAAY;AACVA,mCAAOM,IAAP;AACD;;AAHU,+BAIPF,IAAIG,KAAJ,CAAUC,IAJH;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAKY9B,UAAU0B,IAAIG,KAAJ,CAAUC,IAApB,CALZ;;AAAA;AAKHC,gCALG;;AAMTvB,yCAAeuB,OAAOC,aAAtB;AACMC,oCAPG,GAOU;AACjBC,qCAASH,OAAOI,QADC;AAEjBC,yCAAaL,OAAOM,YAFH;AAGjBC,uCAAWP,OAAOQ,UAHD;AAIjBC,iCAAK,IAJY;AAKjBC,uCAAW;AALM,2BAPV;AAcHC,uCAdG,GAca5C,YAAYe,SAAZ,CAAsBoB,UAAtB,CAdb;;AAeTN,8BAAIgB,QAAJ,CAAc,GAAE1C,eAAekB,WAAY,YAAWuB,aAAc,EAApE;AACAf,8BAAIiB,GAAJ;AAhBS;AAAA;;AAAA;AAkBHC,yCAlBG,GAkBe/C,YAAYe,SAAZ,CAAsB;AAC5C2B,iCAAK,MADuC;AAE5CM,gDAAoB;AAFwB,2BAAtB,CAlBf;;AAsBTnB,8BAAIgB,QAAJ,CAAc,GAAE1C,eAAekB,WAAY,IAAG0B,eAAgB,EAA9D;AACAlB,8BAAIiB,GAAJ;AACAtC,iCAAOyC,KAAP;AACMhB,iCAzBG;AA0BPvB;AA1BO,6BA2BJkB,IAAIG,KA3BA;;AA6BTE,kCAAOiB,SAAP,GAAmBC,OAAOvB,IAAIG,KAAJ,CAAUmB,SAAjB,CAAnB;AA7BS,2DA8BFxB,QAAQO,OAAR,CA9BE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAb;;AAAA;AAAA;AAAA;AAAA;AAiCD,aAlCM,CAtBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2DAmB,OAAOC,OAAP,GAAiBjD,KAAjB","file":"login.js","sourcesContent":["const express = require('express')\nconst bodyParser = require('body-parser')\nconst cors = require('cors')\nconst querystring = require('querystring')\nconst openBrowser = require('./openBrowser')\nconst getTokens = require('./getTokens')\nconst platformConfig = require('../config')\n\nconst login = async () => {\n  const app = express()\n  app.use(bodyParser.json())\n  app.use(cors())\n  const server = app.listen(8000)\n  let refreshToken\n\n  const scope = ['openid', 'email_verified', 'email', 'profile', 'name', 'offline_access']\n\n  const AUTH0_DOMAIN = platformConfig.auth0Domain\n\n  const auth0Queries = querystring.stringify({\n    audience: `https://${AUTH0_DOMAIN}/userinfo`,\n    response_type: 'code',\n    client_id: platformConfig.auth0ClientId,\n    redirect_uri: `${platformConfig.frontendUrl}callback`,\n    scope: scope.join(' ')\n  })\n  const auth0Endpoint = `https://${AUTH0_DOMAIN}/authorize?${auth0Queries}`\n\n  const opnRes = await openBrowser(auth0Endpoint)\n\n  return new Promise((resolve) => {\n    app.get('/', async (req, res) => { // eslint-disable-line\n      if (opnRes) {\n        opnRes.kill()\n      }\n      if (req.query.code) {\n        const tokens = await getTokens(req.query.code)\n        refreshToken = tokens.refresh_token\n        const queriesObj = {\n          idToken: tokens.id_token,\n          accessToken: tokens.access_token,\n          expiresIn: tokens.expires_in,\n          cli: true,\n          cliAuthed: true\n        }\n        const tokensQueries = querystring.stringify(queriesObj)\n        res.redirect(`${platformConfig.frontendUrl}callback?${tokensQueries}`)\n        res.end()\n      } else {\n        const endLoginQueries = querystring.stringify({\n          cli: 'true',\n          cliLoginSuccessful: 'true'\n        })\n        res.redirect(`${platformConfig.frontendUrl}?${endLoginQueries}`)\n        res.end()\n        server.close()\n        const tokens = {\n          refreshToken,\n          ...req.query\n        }\n        tokens.expiresAt = Number(req.query.expiresAt)\n        return resolve(tokens)\n      }\n    })\n  })\n}\n\nmodule.exports = login\n"]}