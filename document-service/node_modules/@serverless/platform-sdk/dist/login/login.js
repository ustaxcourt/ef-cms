'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var express = require('express');
var bodyParser = require('body-parser');
var cors = require('cors');
var querystring = require('querystring');
var openBrowser = require('./openBrowser');
var getTokens = require('./getTokens');
var platformConfig = require('../config');

var login = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var app, server, refreshToken, scope, AUTH0_DOMAIN, auth0Queries, auth0Endpoint, opnRes;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            app = express();

            app.use(bodyParser.json());
            app.use(cors());
            server = app.listen(8000);
            refreshToken = void 0;
            scope = ['openid', 'email_verified', 'email', 'profile', 'name', 'offline_access'];
            AUTH0_DOMAIN = platformConfig.auth0Domain;
            auth0Queries = querystring.stringify({
              audience: `https://${AUTH0_DOMAIN}/userinfo`,
              response_type: 'code',
              client_id: platformConfig.auth0ClientId,
              redirect_uri: `${platformConfig.frontendUrl}callback`,
              scope: scope.join(' ')
            });
            auth0Endpoint = `https://${AUTH0_DOMAIN}/authorize?${auth0Queries}`;
            _context2.next = 11;
            return openBrowser(auth0Endpoint);

          case 11:
            opnRes = _context2.sent;
            return _context2.abrupt('return', new Promise(function (resolve) {
              app.get('/', function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
                  var tokens, queriesObj, tokensQueries, endLoginQueries, _tokens;

                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          // eslint-disable-line
                          if (opnRes) {
                            opnRes.kill();
                          }

                          if (!req.query.code) {
                            _context.next = 12;
                            break;
                          }

                          _context.next = 4;
                          return getTokens(req.query.code);

                        case 4:
                          tokens = _context.sent;

                          refreshToken = tokens.refresh_token;
                          queriesObj = {
                            idToken: tokens.id_token,
                            accessToken: tokens.access_token,
                            expiresIn: tokens.expires_in,
                            cli: true,
                            cliAuthed: true
                          };
                          tokensQueries = querystring.stringify(queriesObj);

                          res.redirect(`${platformConfig.frontendUrl}callback?${tokensQueries}`);
                          res.end();
                          _context.next = 19;
                          break;

                        case 12:
                          endLoginQueries = querystring.stringify({
                            cli: 'true',
                            cliLoginSuccessful: 'true'
                          });

                          res.redirect(`${platformConfig.frontendUrl}?${endLoginQueries}`);
                          res.end();
                          server.close();
                          _tokens = Object.assign({
                            refreshToken
                          }, req.query);

                          _tokens.expiresAt = Number(req.query.expiresAt);
                          return _context.abrupt('return', resolve(_tokens));

                        case 19:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, undefined);
                }));

                return function (_x, _x2) {
                  return _ref2.apply(this, arguments);
                };
              }());
            }));

          case 13:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function login() {
    return _ref.apply(this, arguments);
  };
}();

module.exports = login;
//# sourceMappingURL=login.js.map