// Generated by CoffeeScript 1.7.1
module.exports = {
  required: function(definition, context) {
    var i, property, _i, _len;
    if (!this.test_type("array", definition)) {
      throw new Error("The 'required' attribute must be an array");
    }
    if (definition.length === 0) {
      throw new Error("The 'required' array must have at least one element");
    }
    for (i = _i = 0, _len = definition.length; _i < _len; i = ++_i) {
      property = definition[i];
      if (!this.test_type("string", property)) {
        throw new Error("The 'required' array may only contain strings");
      }
    }
    return (function(_this) {
      return function(data, runtime) {
        var c, _j, _len1;
        if (_this.test_type("object", data)) {
          for (i = _j = 0, _len1 = definition.length; _j < _len1; i = ++_j) {
            property = definition[i];
            if (data[property] === void 0) {
              c = context.child(i);
              c.definition = property;
              runtime.error(c, void 0, {
                description: "Required property '" + property + "' is missing"
              });
            }
          }
        }
        return null;
      };
    })(this);
  },
  properties: function(definition, context) {
    var new_context, property, schema, test, tests;
    if (!this.test_type("object", definition)) {
      throw new Error("The 'properties' attribute must be an object");
    }
    tests = {};
    for (property in definition) {
      schema = definition[property];
      if (!this.test_type("object", schema)) {
        throw new Error("The 'properties' attribute must be an object");
      }
      new_context = context.child(property);
      test = this.compile(new_context, schema);
      tests[property] = test;
    }
    return (function(_this) {
      return function(data, runtime) {
        var value;
        if (_this.test_type("object", data)) {
          for (property in data) {
            value = data[property];
            if ((test = tests[property]) != null) {
              test(value, runtime.child(property));
            }
          }
          return null;
        }
      };
    })(this);
  },
  minProperties: function(definition, context) {
    return (function(_this) {
      return function(data, runtime) {
        if (_this.test_type("object", data)) {
          if (Object.keys(data).length < definition) {
            return runtime.error(context, data, {
              description: "Object must have at least " + definition + " properties."
            });
          }
        }
      };
    })(this);
  },
  maxProperties: function(definition, context) {
    return (function(_this) {
      return function(data, runtime) {
        if (_this.test_type("object", data)) {
          if (Object.keys(data).length > definition) {
            return runtime.error(context, data, {
              description: "Object cannot have more than " + definition + " properties."
            });
          }
        }
      };
    })(this);
  },
  dependencies: function(definition, context) {
    var dependency, fn, name, property, tests, _i, _len;
    if (!this.test_type("object", definition)) {
      throw new Error("Value of 'dependencies' must be an object");
    } else {
      tests = [];
      for (property in definition) {
        dependency = definition[property];
        if (this.test_type("array", dependency)) {
          if (dependency.length === 0) {
            throw new Error("Arrays in 'dependencies' may not be empty");
          }
          for (_i = 0, _len = dependency.length; _i < _len; _i++) {
            name = dependency[_i];
            if (!this.test_type("string", name)) {
              throw new Error("Vales of 'dependencies' arrays must be strings");
            }
          }
          tests.push((function(_this) {
            return function(data, runtime) {
              var item, _j, _len1;
              if (data[property] != null) {
                for (_j = 0, _len1 = dependency.length; _j < _len1; _j++) {
                  item = dependency[_j];
                  if (data[item] == null) {
                    runtime.child(property).error(context);
                  }
                }
                return null;
              }
            };
          })(this));
        } else if (this.test_type("object", dependency)) {
          fn = this.compile(context, dependency);
          tests.push((function(_this) {
            return function(data, runtime) {
              if (data[property]) {
                return fn(data, runtime);
              } else {
                return true;
              }
            };
          })(this));
        } else {
          throw new Error("Invalid dependency");
        }
      }
    }
    return (function(_this) {
      return function(data, runtime) {
        var test, _j, _len1;
        if (_this.test_type("object", data)) {
          for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
            test = tests[_j];
            test(data, runtime);
          }
          return null;
        }
      };
    })(this);
  }
};
