// Generated by CoffeeScript 1.7.1
module.exports = {
  type: function(definition, context) {
    var tests, type, _fn, _i, _len;
    if (this.test_type("array", definition)) {
      if (definition.length === 0) {
        throw new Error("Invalid 'type': arrays may not be empty");
      }
      tests = [];
      _fn = (function(_this) {
        return function(type) {
          return tests.push(function(data, runtime) {
            return _this.test_type(type, data);
          });
        };
      })(this);
      for (_i = 0, _len = definition.length; _i < _len; _i++) {
        type = definition[_i];
        if (!this.is_primitive(type)) {
          throw new Error("Invalid 'type': " + type + " is not a primitive type");
        }
        _fn(type);
      }
      return (function(_this) {
        return function(data, runtime) {
          var test, types, valid, _j, _len1;
          valid = false;
          for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
            test = tests[_j];
            if (test(data, runtime)) {
              valid = true;
            }
          }
          if (valid === false) {
            types = definition.join(', ');
            return runtime.error(context, data, {
              description: "Expected type to be one of [" + types + "] but found `" + (_this.get_type(data)) + "`"
            });
          }
        };
      })(this);
    } else if (this.test_type("string", definition)) {
      if (!this.is_primitive(definition)) {
        throw new Error("Invalid 'type': " + definition + " is not a primitive type");
      }
      return (function(_this) {
        return function(data, runtime) {
          if (!_this.test_type(definition, data)) {
            return runtime.error(context, data, {
              description: "Expected type to be `" + definition + "` but found `" + (_this.get_type(data)) + "`"
            });
          }
        };
      })(this);
    } else {
      throw new Error("The value of 'type' must be a string or an array");
    }
  }
};
