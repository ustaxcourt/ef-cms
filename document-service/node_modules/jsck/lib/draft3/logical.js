// Generated by CoffeeScript 1.7.1
var URI;

URI = require("../uri");

module.exports = {
  "extends": function(schemas, context) {
    var i, new_context, parent, ref, schema, tests, uri, _i, _j, _len, _len1;
    if (!this.test_type("array", schemas)) {
      schemas = [schemas];
    }
    for (i = _i = 0, _len = schemas.length; _i < _len; i = ++_i) {
      schema = schemas[i];
      if ((ref = schema.$ref) != null) {
        uri = URI.resolve(context.scope, ref);
        parent = this.find(uri);
        if (!parent) {
          throw new Error("No schema found for $ref '" + ref + "'");
        } else {
          schemas[i] = parent;
        }
      }
    }
    tests = [];
    for (i = _j = 0, _len1 = schemas.length; _j < _len1; i = ++_j) {
      schema = schemas[i];
      new_context = context.child(i);
      tests.push(this.compile(new_context, schema));
    }
    return (function(_this) {
      return function(data, runtime) {
        var test, _k, _len2, _results;
        _results = [];
        for (_k = 0, _len2 = tests.length; _k < _len2; _k++) {
          test = tests[_k];
          _results.push(test(data, runtime));
        }
        return _results;
      };
    })(this);
  },
  disallow: function(definition, context) {
    var i, tests, type, _fn, _i, _len;
    if (this.test_type("array", definition)) {
      tests = [];
      _fn = (function(_this) {
        return function(i) {
          var inverse;
          if (_this.test_type("object", type)) {
            inverse = _this.compile(context, type);
            return tests.push(function(data, runtime) {
              var temp;
              temp = new runtime.constructor({
                pointer: "",
                errors: []
              });
              inverse(data, temp);
              if (temp.errors.length === 0) {
                return runtime.error(context, data);
              }
            });
          } else {
            return tests.push(_this.disallow(type, context));
          }
        };
      })(this);
      for (i = _i = 0, _len = definition.length; _i < _len; i = ++_i) {
        type = definition[i];
        _fn(i);
      }
      return (function(_this) {
        return function(data, runtime) {
          var test, _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
            test = tests[_j];
            _results.push(test(data, runtime));
          }
          return _results;
        };
      })(this);
    } else {
      return (function(_this) {
        return function(data, runtime) {
          if (_this.test_type(definition, data)) {
            return runtime.error(context, data);
          }
        };
      })(this);
    }
  }
};
