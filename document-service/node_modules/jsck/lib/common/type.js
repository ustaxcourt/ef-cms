// Generated by CoffeeScript 1.7.1
module.exports = {
  type: function(definition, context) {
    var tests, type, _fn, _i, _len;
    if (this.test_type("array", definition)) {
      tests = [];
      _fn = (function(_this) {
        return function(type) {
          var test;
          if (_this.test_type("object", type)) {
            test = _this.compile(context, type);
            return tests.push(function(data, runtime) {
              var temp;
              temp = new runtime.constructor({
                pointer: "",
                errors: []
              });
              test(data, temp);
              return temp.errors.length === 0;
            });
          } else {
            return tests.push(function(data, runtime) {
              return _this.test_type(type, data);
            });
          }
        };
      })(this);
      for (_i = 0, _len = definition.length; _i < _len; _i++) {
        type = definition[_i];
        _fn(type);
      }
      return (function(_this) {
        return function(data, runtime) {
          var test, valid, _j, _len1;
          valid = false;
          for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
            test = tests[_j];
            if (test(data, runtime)) {
              valid = true;
            }
          }
          if (valid === false) {
            return runtime.error(context, data);
          }
        };
      })(this);
    } else if (this.test_type("object", definition)) {
      return this.compile(context, definition);
    } else {
      return (function(_this) {
        return function(data, runtime) {
          if (!_this.test_type(definition, data)) {
            return runtime.error(context, data);
          }
        };
      })(this);
    }
  },
  is_object: function(data) {
    return (data != null) && (typeof data) === "object" && !(data instanceof Array) && !(data instanceof Date);
  },
  is_primitive: function(name) {
    return name === "integer" || name === "number" || name === "string" || name === "object" || name === "array" || name === "boolean" || name === "null";
  },
  get_type: function(data) {
    if (typeof data === "number" && data % 1 === 0) {
      return "integer";
    }
    if (typeof data === "number") {
      return "number";
    }
    if (typeof data === "string") {
      return "string";
    }
    if (this.is_object(data)) {
      return "object";
    }
    if (data instanceof Array) {
      return "array";
    }
    if (typeof data === "boolean") {
      return "boolean";
    }
    if (data === null) {
      return "null";
    }
  },
  test_type: function(type_name, data) {
    switch (type_name) {
      case "integer":
        return typeof data === "number" && data % 1 === 0;
      case "number":
        return typeof data === "number";
      case "string":
        return typeof data === "string";
      case "object":
        return this.is_object(data);
      case "array":
        return data instanceof Array;
      case "boolean":
        return typeof data === "boolean";
      case "null":
        return data === null;
      case "any":
        return true;
      default:
        throw new Error("Bad type: '" + type_name + "'");
    }
  }
};
