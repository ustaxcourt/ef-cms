// Generated by CoffeeScript 1.7.1
module.exports = {
  maxItems: function(value, context) {
    return (function(_this) {
      return function(data, runtime) {
        if (_this.test_type("array", data)) {
          if (data.length > value) {
            return runtime.error(context, data, {
              description: "Array must have fewer than " + value + " items."
            });
          }
        }
      };
    })(this);
  },
  minItems: function(value, context) {
    return (function(_this) {
      return function(data, runtime) {
        if (_this.test_type("array", data)) {
          if (data.length < value) {
            return runtime.error(context, data, {
              description: "Array must have more than " + value + " items."
            });
          }
        }
      };
    })(this);
  },
  items: function(definition, context) {
    var test;
    if (this.test_type("array", definition)) {
      return test = this._tuple_items(definition, context);
    } else if (this.test_type("object", definition)) {
      test = this.compile(context, definition);
      return (function(_this) {
        return function(data, runtime) {
          var i, item, _i, _len;
          for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
            item = data[i];
            test(item, runtime.child(i));
          }
          return null;
        };
      })(this);
    } else {
      throw new Error("The 'items' attribute must be an object or an array");
    }
  },
  _additionalItems: function(definition, context) {
    var test;
    if (this.test_type("object", definition)) {
      test = this.compile(context, definition);
    } else if (definition === false) {
      test = function(data, runtime) {
        return runtime.error(context, data, {
          description: "Array is supposed to be a tuple, but has too many items."
        });
      };
    } else if (definition === true) {

    } else {
      throw new Error("The 'additionalItems' attribute must be an object or false");
    }
    return (function(_this) {
      return function(data, runtime) {
        var i, item, _i, _len;
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          item = data[i];
          test(item, runtime.child(i));
        }
        return null;
      };
    })(this);
  },
  _tuple_items: function(definition, context) {
    var add_item_test, additionalItems, i, schema, tests, _i, _len;
    additionalItems = context.modifiers.additionalItems;
    if (additionalItems != null) {
      add_item_test = this._additionalItems(additionalItems, context.sibling("additionalItems"));
    } else {
      add_item_test = null;
    }
    tests = [];
    for (i = _i = 0, _len = definition.length; _i < _len; i = ++_i) {
      schema = definition[i];
      if (!this.test_type("object", schema)) {
        throw new Error("The 'items' attribute must be an object or an array");
      }
      tests.push(this.compile(context.child(i), schema));
    }
    return (function(_this) {
      return function(data, runtime) {
        var test, _j, _len1;
        if (_this.test_type("array", data)) {
          for (i = _j = 0, _len1 = tests.length; _j < _len1; i = ++_j) {
            test = tests[i];
            test(data[i], runtime.child(i));
          }
          if ((data.length > tests.length) && add_item_test) {
            return add_item_test(data.slice(tests.length), runtime);
          }
        }
      };
    })(this);
  },
  uniqueItems: function(definition, context) {
    return null;
  }
};
