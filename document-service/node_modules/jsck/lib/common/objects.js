// Generated by CoffeeScript 1.7.1
module.exports = {
  patternProperties: function(definition, context) {
    var additionalProperties, pattern, schema, tests;
    additionalProperties = context.modifiers.additionalProperties;
    if (additionalProperties) {
      return null;
    }
    if (!this.test_type("object", definition)) {
      throw new Error("The 'patternProperties' attribute must be an object");
    }
    if (Object.keys(definition).length === 0) {
      throw new Error("The 'patternProperties' object should not be empty");
    }
    tests = {};
    for (pattern in definition) {
      schema = definition[pattern];
      if (!this.test_type("object", schema)) {
        throw new Error("Values of 'patternProperties' must be an objects");
      }
      tests[pattern] = {
        regex: new RegExp(pattern),
        test: this.compile(context.child(pattern), schema)
      };
    }
    return (function(_this) {
      return function(data, runtime) {
        var object, property, value;
        for (property in data) {
          value = data[property];
          for (pattern in tests) {
            object = tests[pattern];
            if (object.regex.test(property)) {
              object.test(value, runtime.child(property));
            }
          }
        }
        return null;
      };
    })(this);
  },
  additionalProperties: function(definition, context) {
    var add_prop_test, pattern, patternProperties, patterns, properties, schema, _ref;
    _ref = context.modifiers, properties = _ref.properties, patternProperties = _ref.patternProperties;
    if (this.test_type("object", definition)) {
      add_prop_test = this.compile(context, definition);
    } else if (definition === false) {
      add_prop_test = (function(_this) {
        return function(data, runtime) {
          return runtime.error(context, data, {
            description: "Unspecified properties are not allowed on this object."
          });
        };
      })(this);
    } else if (definition === void 0) {
      add_prop_test = null;
    } else {
      throw new Error("The 'additionalProperties' attribute must be an object or false");
    }
    patterns = {};
    for (pattern in patternProperties) {
      schema = patternProperties[pattern];
      patterns[pattern] = {
        regex: new RegExp(pattern),
        test: this.compile(context.sibling("patternProperties").child(pattern), schema)
      };
    }
    return (function(_this) {
      return function(data, runtime) {
        var explicit, object, patterned, property, value;
        if (_this.test_type("object", data)) {
          for (property in data) {
            value = data[property];
            explicit = false;
            patterned = false;
            if (properties != null ? properties[property] : void 0) {
              explicit = true;
            }
            if (patterns) {
              for (pattern in patterns) {
                object = patterns[pattern];
                if (object.regex.test(property)) {
                  patterned = true;
                  object.test(value, runtime.child(property));
                }
              }
            }
            if (!explicit && !patterned && add_prop_test) {
              add_prop_test(value, runtime.child(property));
            }
          }
          return null;
        }
      };
    })(this);
  }
};
