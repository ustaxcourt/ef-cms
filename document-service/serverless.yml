service: ef-cms
plugins:
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-plugin-split-stacks
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  - serverless-aws-documentation
  - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-plugin-git-variables
custom:
  s3:
    host: 0.0.0.0
    port: 9000
    directory: /tmp
    cors: cors-policy.xml
  dynamodb:
    start:
      inMemory: true
      migrate: true
      port: 8000
      seed: false
    # seed:
    #   test:
    #     sources:
    #     - table: ${self:provider.environment.DOCUMENTS_DYNAMODB_TABLE}
    #       sources:
    #         - ./spec/fixtures/stuff.json

  alerts:
    stages:
      - dev
      - stg
      - prod
    dashboards: true
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
  documentation:
    api:
      info:
        title: EF-CMS Documents API
        description: Documents API for U.S. Tax Court EF-CMS
        contact:
          url: https://www.ustaxcourt.gov
          email: webmaster@ustaxcourt.gov
        license:
          name: Creative Commons 0
          url: https://creativecommons.org/share-your-work/public-domain/cc0/
      tags:
        -
          name: ef-cms
          description: EF-CMS
        -
          name: documents
          description: document service
    summary: 'EF-CMS Documents API'
    version: "${opt:stage}-${git:sha1}"
    description: 'EF-CMS Documents API documented with OpenAPI specification'
    resources:
      -
        path: "v1/documents"
        description: "Path used for creating a document."
      -
        path: "v1/documents/{documentId}"
        description: "Path used for retrieving document with a documentId."
      -
        path: "v1/documents/policy"
        description: "Path used for retrieving pre-signed policy url."
    models:
      -
        name: "document"
        description: "a document response"
        contentType: "application/json"
        schema:
          type: object
          properties:
            documentId:
              type: string
              description: id of document
            userId:
              type: string
              description: id of user who created the document
            documentType:
              type: string
              description: type of this document
            createdAt:
              type: string
              description: date document created
      -
        name: "policyUrl"
        description: "a policy url response"
        contentType: "application/json"
        schema:
          type: object
          properties:
            url:
              type: string
              description: url
            fields:
              $ref: "{{model: fields}}"
      -
        name: "fields"
        description: "a policy url response"
        contentType: "application/json"
        schema:
          type: object
          properties:
            bucket:
              type: string
              description: The bucket name.
            X-Amz-Algorithm:
              type: string
              description: The algorithm.
            X-Amz-Credential:
              type: string
              description: The credential.
            X-Amz-Date:
              type: string
              description: The date.
            X-Amz-Security-Token:
              type: string
              description: The security token.
            Policy:
              type: string
              description: The policy.
            X-Amz-Signature:
              type: string
              description: The signature.
      -
        name: "awsError"
        description: "an aws internal server error, usually with status code 502 (bad gateway)"
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
          required:
            - message

  customDomain:
    domainName: documents-${self:provider.stage}.${opt:domain}
    basePath: ''
    endpointType: 'regional'
    certificateName: documents-${self:provider.stage}.${opt:domain}
    certificateRegion: ${opt:region}
    stage: ${self:provider.stage}
    createRoute53Record: false
    enabled: true
  splitStacks:
    perFunction: true
    perType: false
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  vars: ${file(./config/${self:custom.stage}.yml)}

provider:
  name: aws
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs8.10
  memorySize: 128
  timeout: 10
  logRetentionInDays: 7
  s3Endpoint: s3.${opt:region}.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  # role: ${self:custom.vars.role}
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256

  environment:
    S3_ENDPOINT: ${self:custom.vars.s3Endpoint, self:provider.s3Endpoint}
    DOCUMENTS_BUCKET_NAME: ${opt:domain}-documents-${opt:stage}-${opt:region}
    DOCUMENTS_DYNAMODB_TABLE: efcms-documents-${opt:stage}
    DYNAMODB_ENDPOINT: ${self:custom.vars.dynamodbEndpoint, self:provider.dynamodbEndpoint}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: DocumentsBucket
            - "/*"
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
       - dynamodb:BatchWriteItem
      Resource:
        - { "Fn::GetAtt": ["DocumentsDynamoDBTable", "Arn" ] }
        - { "Fn::Join": [ "/", [
            { "Fn::GetAtt": ["DocumentsDynamoDBTable", "Arn" ] }, "index", "DocketNumberIndex"
          ]]}

package:
  exclude:
    - ./**
  include:
    - src/**
    - swagger.json
    - ./package.json
    - ./node_modules/**

  excludeDevDependencies: true

resources:
  Resources:
    #####
    # Begin S3
    #####
    DocumentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.DOCUMENTS_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - Authorization
              AllowedMethods:
                - GET
                - POST
              AllowedOrigins:
                - '*'
              MaxAge: 3000
        VersioningConfiguration:
          Status: Enabled
    #####
    # Begin DynamoDB
    #####
    DocumentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: documentId
            AttributeType: S
        KeySchema:
          - AttributeName: documentId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.vars.readCapacityUnits}
          WriteCapacityUnits: ${self:custom.vars.writeCapacityUnits}
        TableName: ${self:provider.environment.DOCUMENTS_DYNAMODB_TABLE}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    #####
    # Begin Stage for API Gateway Logging
    #####
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage}
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: true

functions:
  createPolicyUrl:
    handler: src/documents/createPolicyUrl.create
    events:
      - http:
          path: v1/documents/policy
          method: get
          cors: true
          documentation:
            summary: create a pre-signed url
            tags:
              - documents
            description: >
              Create a pre-signed url for document uploads to S3.
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "pre-signed policy url"
                responseModels:
                  "application/json": "policyUrl"

  createDocument:
    handler: src/documents/createDocument.create
    events:
      - http:
          path: v1/documents
          method: post
          cors: true
          documentation:
            summary: create a document
            tags:
              - documents
            description: >
              Create a document.
            methodResponses:
              -
                statusCode: '200'
                responseBody:
                  description: "document meta-data"
                responseModels:
                  "application/json": document


#  getDocument:
#    handler: src/documents/getDocument.handler
#    documentation:
#      summary: retrieves a document by document id
#      tags:
#        - documents
#      description: >
#        Retrieve a document by document id.
#      # queryParams:
#      #   -
#      #     name: firstParam
#      #     description: The first param that we want, you MUST pass it
#      #     required: true
#      #   -
#      #     name: secondParam
#      #     description: The second param. This one is optional
#      methodResponses:
#        -
#          statusCode: '200'
#          responseModels:
#            "application/json": HelloWorldResponse
#          # responseHeaders:
#          #   -
#          #     name: link
#          #     description: describes other actions that can be taken
#          #     type: string
#    events:
#      - http:
#          path: v1/hello
#          method: get
#          cors: true

  swagger:
    handler: src/swagger/swagger.handler
    events:
      - http:
          path: v1/swagger
          method: get
          cors: true
