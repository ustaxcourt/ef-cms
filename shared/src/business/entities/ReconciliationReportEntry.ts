import {
  ALL_EVENT_CODES,
  AUTOGENERATED_EXTERNAL_DOCUMENT_TYPES,
  AUTOGENERATED_INTERNAL_DOCUMENT_TYPES,
  EXTERNAL_DOCUMENT_TYPES,
  INTERNAL_DOCUMENT_TYPES,
  PARTIES_CODES,
} from '@shared/business/entities/EntityConstants';
import { DOCKET_ENTRY_VALIDATION_RULES } from './EntityValidationConstants';
import { JoiValidationConstants } from '@shared/business/entities/JoiValidationConstants';
import { JoiValidationEntity } from './JoiValidationEntity';
import { pick } from 'lodash';
import joi from 'joi';

export class ReconciliationReportEntry extends JoiValidationEntity {
  public caseCaption: string;
  public docketEntryId: string;
  public docketNumber: string;
  public documentTitle: string;
  public eventCode: string;
  public isFileAttached: string;
  public filedBy: string;
  public filingDate: string;
  public index: string;
  public servedAt: string;
  public servedPartiesCode: string;

  constructor(rawDocketEntry) {
    super('ReconciliationReportEntry');

    this.caseCaption = rawDocketEntry.caseCaption;
    this.docketEntryId = rawDocketEntry.docketEntryId;
    this.docketNumber = rawDocketEntry.docketNumber;
    this.documentTitle = rawDocketEntry.documentTitle;
    this.eventCode = rawDocketEntry.eventCode;
    this.isFileAttached = rawDocketEntry.isFileAttached;
    this.filedBy = rawDocketEntry.filedBy;
    this.filingDate = rawDocketEntry.filingDate;
    this.index = rawDocketEntry.index;
    this.servedAt = rawDocketEntry.servedAt;
    this.servedPartiesCode = rawDocketEntry.servedPartiesCode;
  }

  getValidationRules() {
    return pick(DOCKET_ENTRY_VALIDATION_RULES, [
      'caseCaption',
      'docketEntryId',
      'docketNumber',
      'documentTitle',
      'eventCode',
      'isFileAttached',
      'filedBy',
      'filingDate',
      'index',
      'servedAt',
      'servedPartiesCode',
    ]);
  }

  getValidationRules_NEW() {
    return {
      caseCaption: JoiValidationConstants.CASE_CAPTION.optional(),
      docketNumber: JoiValidationConstants.DOCKET_NUMBER.required().description(
        'Docket Number of the associated Case in XXXXX-YY format.',
      ),
      docketNumbers: JoiValidationConstants.STRING.max(500)
        .optional()
        .description(
          'Optional Docket Number text used when generating a fully concatenated document title.',
        ),
      documentTitle:
        JoiValidationConstants.DOCUMENT_TITLE.optional().description(
          'The title of this document.',
        ),
      eventCode: joi.when('isDraft', {
        is: true,
        otherwise: JoiValidationConstants.STRING.valid(
          ...ALL_EVENT_CODES,
        ).required(),
        then: JoiValidationConstants.STRING.valid(...ALL_EVENT_CODES)
          .optional()
          .allow(null),
      }),
      filedBy: JoiValidationConstants.STRING.max(500)
        .when('documentType', {
          is: JoiValidationConstants.STRING.valid(
            ...EXTERNAL_DOCUMENT_TYPES,
            ...INTERNAL_DOCUMENT_TYPES,
          ),
          otherwise: joi.allow('', null).optional(),
          then: joi.when('documentType', {
            is: JoiValidationConstants.STRING.valid(
              ...AUTOGENERATED_EXTERNAL_DOCUMENT_TYPES,
              ...AUTOGENERATED_INTERNAL_DOCUMENT_TYPES,
            ),
            otherwise: joi.required(),
            then: joi.when('isAutoGenerated', {
              is: false,
              otherwise: joi.allow('', null).optional(),
              then: joi.required(),
            }),
          }),
        })
        .description(
          'The party who filed the document, either the petitioner or respondent on the case.',
        ),
      filingDate: JoiValidationConstants.ISO_DATE.max('now')
        .required()
        .description('Date that this Document was filed.'),
      index: joi
        .number()
        .integer()
        .optional()
        .description('Index of this item in the Docket Record list.'),
      isFileAttached: joi
        .boolean()
        .optional()
        .description('Has an associated PDF in S3.'),
      servedAt: joi
        .alternatives()
        .conditional('servedParties', {
          is: joi.exist().not(null),
          otherwise: JoiValidationConstants.ISO_DATE.optional(),
          then: JoiValidationConstants.ISO_DATE.required(),
        })
        .description('When the document is served on the parties.'),
      servedPartiesCode: JoiValidationConstants.STRING.valid(
        ...Object.values(PARTIES_CODES),
      )
        .allow(null)
        .optional()
        .description('Served parties code to override system-computed code.'),
    };
  }

  getErrorToMessageMap() {
    return {};
  }
}

export type RawReconciliationReportEntry =
  ExcludeMethods<ReconciliationReportEntry>;
