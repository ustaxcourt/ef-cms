import { GENERATION_TYPES } from '@web-client/getConstants';
import { presenter } from '../../presenter-mock';
import { runAction } from '@web-client/presenter/test.cerebral';
import { setDocumentFileForAutoGeneratedEntryOfAppearanceAction } from './setDocumentFileForAutoGeneratedEntryOfAppearanceAction';

describe('setDefaultFileDocumentFormValuesAction', () => {
  it('should set isUploading to true and not change the primaryDocumentFile if the pdfPreviewUrl is not set', async () => {
    const result = await runAction(
      setDocumentFileForAutoGeneratedEntryOfAppearanceAction,
      {
        modules: { presenter },
        state: {
          form: { primaryDocumentFile: 'this value should not be modified' },
          pdfPreviewUrl: undefined,
        },
      },
    );

    expect(result.state.form.primaryDocumentFile).toEqual(
      'this value should not be modified',
    );
    expect(result.state.fileUploadProgress.isUploading).toEqual(true);
  });

  it('should set isUploading to true and modify the primaryDocumentFile when the pdfPreviewUrl is set', async () => {
    (global as any).fetch = jest.fn().mockResolvedValue({
      blob: jest.fn(() => {
        return new Promise(resolve => resolve(new Blob([], { type: 'pdf' })));
      }),
    });

    const result = await runAction(
      setDocumentFileForAutoGeneratedEntryOfAppearanceAction,
      {
        modules: { presenter },
        state: {
          form: {
            generationType: GENERATION_TYPES.AUTO,
            primaryDocumentFile: undefined,
          },
          pdfPreviewUrl: 'http://example.com',
        },
      },
    );

    expect(result.state.form.primaryDocumentFile).toBeDefined();
    expect(result.state.fileUploadProgress.isUploading).toEqual(true);
  });
});
