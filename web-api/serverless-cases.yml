service: ef-cms-cases-${opt:stageColor}
plugins:
  # - serverless-plugin-split-stacks
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  # - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding
  # - serverless-plugin-warmup

custom:
  logForwarding:
    destinationARN: arn:aws:lambda:${opt:region}:${opt:accountId}:function:log_forwarder_${opt:stage}
    filterPattern: 'ERROR'
  #warmup:
  #enabled: true

  jetpack:
    mode: npm
    lockfile: ../package-lock.json

  prune:
    automatic: true
    number: 3

  serverless-offline:
    skipCacheInvalidation: ${opt:skipCacheInvalidation}
    host: 0.0.0.0
    port: 3002

  alerts:
    stages:
      - dev
      - stg
      - test
      - prod
    dashboards: true
    alarms:
      - errorExceptions
    definitions:
      errorExceptions:
        description: 'Internal Error Exception Alarm'
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'ERROR'
    topics:
      alarm:
        topic: arn:aws:sns:${opt:region}:${opt:accountId}:serverless-alerts-topic-${self:provider.stage}

  customDomain:
    domainName: efcms-${self:provider.stage}.${opt:domain}
    basePath: 'cases'
    endpointType: 'regional'
    certificateName: efcms-${self:provider.stage}.${opt:domain}
    certificateRegion: ${opt:region}
    stage: ${self:provider.stage}
    createRoute53Record: false
    enabled: true
  splitStacks:
    perFunction: true
    perType: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  vars: ${file(./config/${self:custom.stage}.yml)}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  elasticsearchEndpoint: ${opt:elasticsearch_endpoint}
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment:
    S3_ENDPOINT: ${self:custom.vars.s3Endpoint, self:provider.s3Endpoint}
    DOCUMENTS_BUCKET_NAME: ${opt:domain}-documents-${opt:stage}-us-east-1
    TEMP_DOCUMENTS_BUCKET_NAME: ${opt:domain}-temp-documents-${opt:stage}-us-east-1
    DYNAMODB_ENDPOINT: ${self:custom.vars.dynamodbEndpoint, self:provider.dynamodbEndpoint}
    MASTER_DYNAMODB_ENDPOINT: ${self:custom.vars.masterDynamodbEndpoint, self:provider.masterDynamodbEndpoint}
    ELASTICSEARCH_ENDPOINT: ${self:custom.vars.elasticsearchEndpoint, self:provider.elasticsearchEndpoint}
    MASTER_REGION: ${self:provider.masterRegion}
    STAGE: ${self:custom.stage}
    USER_POOL_ID: ${opt:userPoolId, self:provider.userPoolId}
    NODE_ENV: ${self:custom.vars.nodeEnv}
    EMAIL_SOURCE: noreply@mail.efcms-${opt:stage}.${opt:domain}
    EMAIL_DOCUMENT_SERVED_TEMPLATE: document_served_${opt:stage}
    EMAIL_SERVED_PETITION_TEMPLATE: petition_served_${opt:stage}
    EFCMS_DOMAIN: ${opt:domain}
    CLAMAV_DEF_DIR: ${self:custom.vars.clamavDefDir, self:provider.clamavDefDir}
    CIRCLE_HONEYBADGER_API_KEY: ${opt:circleHoneybadgerApiKey}
    IRS_SUPERUSER_EMAIL: ${opt:irsSuperuserEmail, self:custom.vars.irsSuperuserEmail}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/casesHandlers.js
  excludeDevDependencies: true

resources:
  Resources:
    #####
    # This Authorizer is used for validating the JWT token before invoking the lambda
    #####
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/${self:provider.environment.USER_POOL_ID}

    #####
    # Begin Stage for API Gateway Logging
    #####
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage}
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: '/*'
            MetricsEnabled: true

functions:
  saveCaseDetailInternalEdit:
    handler: web-api/${self:provider.dir}/casesHandlers.saveCaseDetailInternalEditLambda
    events:
      - http:
          path: /{caseId}
          method: put
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  removeCasePendingItem:
    handler: web-api/${self:provider.dir}/casesHandlers.removeCasePendingItemLambda
    events:
      - http:
          path: /{caseId}/remove-pending/{documentId}
          method: delete
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCase:
    handler: web-api/${self:provider.dir}/casesHandlers.createCaseLambda
    events:
      - http:
          path: /
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCaseFromPaper:
    handler: web-api/${self:provider.dir}/casesHandlers.createCaseFromPaperLambda
    events:
      - http:
          path: /paper
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCase:
    handler: web-api/${self:provider.dir}/casesHandlers.getCaseLambda
    events:
      - http:
          path: /{caseId}
          method: get
          request:
            parameters:
              paths:
                caseId: true
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  caseAdvancedSearch:
    handler: web-api/${self:provider.dir}/casesHandlers.caseAdvancedSearchLambda
    events:
      - http:
          path: /search
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            arn: arn:aws:lambda:${opt:region}:${opt:accountId}:function:cognito_authorizer_lambda_${opt:stage}
            managedExternally: true

  getConsolidatedCasesByCase:
    handler: web-api/${self:provider.dir}/casesHandlers.getConsolidatedCasesByCaseLambda
    events:
      - http:
          path: /{caseId}/consolidated-cases
          method: get
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  serveCaseToIrs:
    handler: web-api/${self:provider.dir}/casesHandlers.serveCaseToIrsLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /{caseId}/serve-to-irs
          method: post
          cors: ui-${self:provider.stage}.ef-cms.${opt:domain}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
