service: ef-cms-public-${opt:stageColor}

plugins:
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  # - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-latest-layer-version
  - serverless-jetpack
  - serverless-log-forwarding

custom:
  logForwarding:
    destinationARN: arn:aws:lambda:${opt:region}:${opt:accountId}:function:log_forwarder_${opt:stage}
    filterPattern: 'ERROR'
  jetpack:
    mode: npm
    lockfile: ../package-lock.json

  prune:
    automatic: true
    number: 3

  serverless-offline:
    skipCacheInvalidation: ${opt:skipCacheInvalidation}
    host: 0.0.0.0
    port: 3013

  alerts:
    stages:
      - dev
      - stg
      - test
      - prod
    dashboards: true
    alarms:
      - errorExceptions
    definitions:
      errorExceptions:
        description: 'Internal Error Exception Alarm'
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'ERROR'
    topics:
      alarm:
        topic: arn:aws:sns:${opt:region}:${opt:accountId}:serverless-alerts-topic-${self:provider.stage}

  customDomain:
    domainName: efcms-${self:provider.stage}.${opt:domain}
    basePath: 'public-api'
    endpointType: 'regional'
    certificateName: efcms-${self:provider.stage}.${opt:domain}
    certificateRegion: ${opt:region}
    stage: ${self:provider.stage}
    createRoute53Record: false
    enabled: true
  splitStacks:
    perFunction: true
    perType: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  vars: ${file(./config/${self:custom.stage}.yml)}

provider:
  name: aws
  endpointType: REGIONAL
  tracing: true
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs12.x
  memorySize: 768
  timeout: 30
  logRetentionInDays: 7
  role: arn:aws:iam::${opt:accountId}:role/lambda_role_${opt:stage}
  dir: ${opt:run_dir, 'src'}
  s3Endpoint: s3.us-east-1.amazonaws.com
  dynamodbEndpoint: dynamodb.${opt:region}.amazonaws.com
  elasticsearchEndpoint: ${opt:elasticsearch_endpoint}
  masterRegion: us-east-1
  userPoolId: us-east-1_7uRkF0Axn
  masterDynamodbEndpoint: dynamodb.us-east-1.amazonaws.com
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  apiGateway:
    binaryMediaTypes:
      - 'application/pdf'
  clamavDefDir: /opt/var/lib/clamav

  environment:
    S3_ENDPOINT: ${self:custom.vars.s3Endpoint, self:provider.s3Endpoint}
    DOCUMENTS_BUCKET_NAME: ${opt:domain}-documents-${opt:stage}-us-east-1
    TEMP_DOCUMENTS_BUCKET_NAME: ${opt:domain}-temp-documents-${opt:stage}-us-east-1
    DYNAMODB_ENDPOINT: ${self:custom.vars.dynamodbEndpoint, self:provider.dynamodbEndpoint}
    MASTER_DYNAMODB_ENDPOINT: ${self:custom.vars.masterDynamodbEndpoint, self:provider.masterDynamodbEndpoint}
    ELASTICSEARCH_ENDPOINT: ${self:custom.vars.elasticsearchEndpoint, self:provider.elasticsearchEndpoint}
    MASTER_REGION: ${self:provider.masterRegion}
    STAGE: ${self:custom.stage}
    USER_POOL_ID: ${opt:userPoolId, self:provider.userPoolId}
    NODE_ENV: ${self:custom.vars.nodeEnv}
    CLAMAV_DEF_DIR: ${self:custom.vars.clamavDefDir, self:provider.clamavDefDir}
    CIRCLE_HONEYBADGER_API_KEY: ${opt:circleHoneybadgerApiKey}

package:
  exclude:
    - ./**
  include:
    - web-api/${self:provider.dir}/publicApiHandlers.js
  excludeDevDependencies: true

resources:
  Resources:
    #####
    # Begin Stage for API Gateway Logging
    #####
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage}
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: '/*'
            MetricsEnabled: true

functions:
  casePublicSearch:
    handler: web-api/${self:provider.dir}/publicApiHandlers.casePublicSearchLambda
    events:
      - http:
          path: /search
          method: get
          cors: ui-public-${self:provider.stage}.ef-cms.${opt:domain}

  getPublicCase:
    handler: web-api/${self:provider.dir}/publicApiHandlers.getPublicCaseLambda
    events:
      - http:
          path: /cases/{caseId}
          method: get
          cors: ui-public-${self:provider.stage}.ef-cms.${opt:domain}

  getPublicDocumentDownloadUrl:
    handler: web-api/${self:provider.dir}/publicApiHandlers.getPublicDocumentDownloadUrlLambda
    events:
      - http:
          path: /{caseId}/{documentId}/public-document-download-url
          method: get
          cors: ui-public-${self:provider.stage}.ef-cms.${opt:domain}

  generatePublicDocketRecordPdfLambda:
    handler: web-api/${self:provider.dir}/publicApiHandlers.generatePublicDocketRecordPdfLambda
    layers:
      - arn:aws:lambda:${opt:region}:${opt:accountId}:layer:${opt:stage}-puppeteer:latest
    memorySize: 3008
    timeout: 900
    events:
      - http:
          path: /cases/{caseId}/generate-docket-record
          method: post
          cors: ui-public-${self:provider.stage}.ef-cms.${opt:domain}

  orderPublicSearch:
    handler: web-api/${self:provider.dir}/publicApiHandlers.orderPublicSearchLambda
    events:
      - http:
          path: /order-search
          method: get
          cors: ui-public-${self:provider.stage}.ef-cms.${opt:domain}

  getPublicJudges:
    handler: web-api/${self:provider.dir}/publicApiHandlers.getPublicJudgesLambda
    events:
      - http:
          path: /judges
          method: get
          cors: ui-public-${self:provider.stage}.ef-cms.${opt:domain}

  opinionPublicSearch:
    handler: web-api/${self:provider.dir}/publicApiHandlers.opinionPublicSearchLambda
    events:
      - http:
          path: /opinion-search
          method: get
          cors: ui-public-${self:provider.stage}.ef-cms.${opt:domain}
