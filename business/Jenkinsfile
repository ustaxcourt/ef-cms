
pipeline {
  agent any

  // environment {
  //   SPAWN_WRAP_SHIM_ROOT = "/home/tomcat"
  //   npm_config_cache = "/home/tomcat"
  //   HOME = "/home/tomcat" // needed to run 'npm i' on docker without being root
  //   CYPRESS_CACHE_FOLDER = "/home/tomcat/cypress_cache" // needed to be able to run cypress without being root
  // }

  options { buildDiscarder(logRotator(daysToKeepStr: '3', artifactDaysToKeepStr: '3')) }

  stages {
    stage('Merge') {
      steps {
        script {
          if (env.branch_name != 'develop' && env.branch_name != 'staging' && env.branch_name != 'master' && env.target_sha1) {
            // todo: there is probably a better way to have Jenkins do this for us automatically
            sh 'git config user.name "EF-CMS Jenkins"'
            sh 'git config user.email "noop@example.com"'
            sh "git merge origin/${env.target_sha1}"
          }
        }
      }
    }
    stage('Audit') {
      steps {
        script {
          dir('business') {
            sh 'docker build -t shared-audit -f Dockerfile.audit .'
            sh 'docker run --rm shared-audit'
          }
        }
      }
    }
    stage('Lint') {
      steps {
        script {
          dir('business') {
            sh 'docker build -t shared-lint -f Dockerfile.lint .'
            sh 'docker run --rm shared-lint'
          }
        }
      }
    }
    stage('Test') {
      steps {
        script {
          dir('business') {
            def CONTAINER_NAME = "shared-test-${BUILD_NUMBER}"
            sh 'docker build -t shared-test -f Dockerfile.test .'
            sh "docker run --name ${CONTAINER_NAME} shared-test"
            sh "docker cp ${CONTAINER_NAME}:/home/app/coverage coverage"
            sh "docker rm ${CONTAINER_NAME}"
          }
        }
      }
      post {
        success {
          dir('business') {
            publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'coverage', reportFiles: 'index.html', reportName: 'Code Coverage Report', reportTitles: ''
          }
        }
      }
    }
    stage('SonarQube') {
      steps {
        script {
          withCredentials([string(credentialsId: 'SHARED_SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
            dir('business') {
              sh 'docker build -t sonarqube -f Dockerfile.sonarqube .'
              sh "docker run -e SONAR_KEY=${API_SONAR_KEY} -e branch_name=${branch_name} -e SONAR_ORG=${SONAR_ORG} -e SONAR_TOKEN=${SONAR_TOKEN} -v `pwd`/coverage:/home/app/coverage --rm sonarqube"
            }
          }
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}
